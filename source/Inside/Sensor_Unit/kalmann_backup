    IMU_Measurement last_measurement;
    IMU_Measurement act_measurement;

    double time_diff;
    Position_t pos{ 0.0, 0.0, 0.0};
    double geschwindigkeit = 0.0;
    int init_timer = 0;


    double dt = 0.005;

    // Kallman Filter Variables
    // The state Vector
    cv::Mat X = ( cv::Mat_<double>(4,1) << 0.0, 0.0, 0.0, 0.0);

    // The Covarianz Vektor
    cv::Mat P = ( cv::Mat_<double>(4,4 ) << 	0.5, 0.0, 0.0, 0.0, \
                                            0.0, 0.5, 0.0, 0.0, \
                                            0.0, 0.0, 0.2, 0.0, \
                                            0.0, 0.0, 0.0, 0.2  );

    // The Working Matrix A
    cv::Mat A = ( cv::Mat_<double>(4,4) <<	1.0, 0.0, dt, 0.0, \
                                            0.0, 1.0, 0.0, dt, \
                                            0.0, 0.0, 1.0, 0.0, \
                                            0.0, 0.0, 0.0, 1.0 );

    // The processing noise Matrix Q
    double sigma_a = 1;
    double sigma_v = dt;

    double sigma_aa = sigma_a * sigma_a;
    double sigma_vv = sigma_v * sigma_v;
    double sigma_av = sigma_a * sigma_v;

    cv::Mat Q = ( cv::Mat_<double>(4,4) <<	sigma_vv, sigma_vv, sigma_av, sigma_av, \
                                            sigma_vv, sigma_vv, sigma_av, sigma_av, \
                                            sigma_av, sigma_av, sigma_aa, sigma_aa, \
                                            sigma_av, sigma_av, sigma_aa, sigma_aa  );

    // The Matrix, used for Innovation
    cv::Mat Z = ( cv::Mat_<double>(2,1) << 0.0, 0.0 );

    cv::Mat w = ( cv::Mat_<double>(2,1) << 0.0, 0.0 );

    cv::Mat H = ( cv::Mat_<double>(2,4) <<	0.0, 0.0, 1.0, 0.0, \
                                            0.0, 0.0, 0.0, 1.0   );

    // Calculating S
    cv::Mat S = ( cv::Mat_<double>(2,2) <<	0.0, 0.0, \
                                            0.0, 0.0  );

    cv::Mat R = ( cv::Mat_<double>(2,2) <<	0.08829,	0.08829, \
                                            0.08829, 	0.08829  );

    // Kalman Gain
    cv::Mat K = ( cv::Mat_<double>(2,2) <<	0.0, 0.0, \
                                            0.0, 0.0  );

    const double influence = 0.1;
    double x_acc = 0.0;
    double y_acc = 0.0;


    while( this->continue_server )
    {
        //Update measurement
        last_measurement = act_measurement;
        IMU_queue_mutex.lock();
            act_measurement = IMU_values.back();
        IMU_queue_mutex.unlock();

        if( act_measurement.timestamp == last_measurement.timestamp  ) continue;
        if( init_timer <= 6 ) { init_timer++; continue; }

        //std::cout << "Prediction" << std::endl;
        X = A * X;
        P = A * P * A.t() + Q;

        //std::cout << X << std::endl;
        //std::cout << P << std::endl;

        //std::cout << "Correction" << std::endl;
        x_acc = (influence * act_measurement.acc[0] * 9.81) + (1.0 - influence) * x_acc;
        y_acc = (influence * act_measurement.acc[1] * 9.81) + (1.0 - influence) * y_acc;


        Z.at<double>(0) = x_acc  ; //act_measurement.acc[0] * 9.81 + 0.1601;
        Z.at<double>(1) = y_acc ; //act_measurement.acc[1] * 9.81 + 0.64;

        //std::cout << Z << std::endl;

        w = Z - ( H * X );

        S = H * P * H.t() + R;
        K = P * H.t() * S.inv( cv::DECOMP_SVD );

        //std::cout <<  P  << std::endl;

        X = X + ( K * w );
        P = ( cv::Mat::eye( 4, 4, CV_64F) - ( K * H ) ) * P;

        //std::cout << X << std::endl;
        //std::cout << P << std::endl;

    int cnt = 200;
    if( (cnt++) >= 200 )
    {
        //std::cout << X << std::endl;
        //std::cout << P << std::endl;
        cnt = 0;
    }



        usleep( 100000 );
    }